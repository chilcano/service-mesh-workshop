### install:
# **** 1) std:
# $ oc adm policy add-scc-to-user privileged -z test1-sa -n test1-ns
# $ oc apply -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/gis-test1.yaml
# $ kubectl apply -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/gis-test1.yaml
# **** 2) with Istio:
# $ istioctl kube-inject -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/gis-test1.yaml -o service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/gis-test1-istio.yaml
# $ kubectl apply -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/gis-test1-istio.yaml
### call to API:
# **** 1) Through ClusterIP SVC (SSH allways is needed):
# $ export GW_URI_SVC_TEST1_SIDECAR=$(kubectl get svc test1-sidecar-svc -n test1-ns -o jsonpath='{.spec.clusterIP}'):$(kubectl get svc test1-sidecar-svc -n test1-ns -o jsonpath='{.spec.ports[0].port}')
# $ export GW_URI_SVC_TEST1_API=$(kubectl get svc test1-api-svc -n test1-ns -o jsonpath='{.spec.clusterIP}'):$(kubectl get svc test1-api-svc -n test1-ns -o jsonpath='{.spec.ports[0].port}')
# $ minikube ssh -- curl -X POST http://${GW_URI_SVC_TEST1_SIDECAR}/endpoint/payment-init/make-payment -d '\{\"fromSort\":\"20-32-00\",\"fromAccount\":\"10502211\",\"toSort\":\"20-32-66\",\"toAccount\":\"10502211\",\"amount\":4.89\}'
# $ minikube ssh -- curl -X POST http://${GW_URI_SVC_TEST1_API}/endpoint/payment-init/make-payment -d '\{\"fromSort\":\"20-32-00\",\"fromAccount\":\"10502211\",\"toSort\":\"20-32-66\",\"toAccount\":\"10502211\",\"amount\":4.89\}'
# **** 2) Through Istio Ingress (External load balancers are not supported in Minikube. To use the host IP of the ingress service, along with the NodePort, to access the ingress.):
# $ export ING_GW_URI=$(kubectl get po -l istio=ingress -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(kubectl get svc istio-ingress -n istio-system -o 'jsonpath={.spec.ports[0].nodePort}')
# $ curl -X POST http://${ING_GW_URI}/endpoint/payment-init/make-payment -d '\{\"fromSort\":\"20-32-00\",\"fromAccount\":\"10502211\",\"toSort\":\"20-32-66\",\"toAccount\":\"10502211\",\"amount\":4.89\}'
# $ curl -o /dev/null -s -w "%{http_code}\n" http://${ING_GW_URI}/endpoint/payment-init/make-payment -d '\{\"fromSort\":\"20-32-00\",\"fromAccount\":\"10502211\",\"toSort\":\"20-32-66\",\"toAccount\":\"10502211\",\"amount\":4.89\}'
---
apiVersion: v1
kind: Namespace
metadata:
  name: test1-ns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test1-sa
  namespace: test1-ns
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test1-sidecar
  namespace: test1-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: gis-security-sidecar
    spec:
      serviceAccountName: test1-sa
      containers:
      - name: gis-security-sidecar
        image: locactus/gis-security-sidecar
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: test1-api
  namespace: test1-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: gis-test-api
    spec:
      serviceAccountName: test1-sa
      containers:
      - name: gis-test-api
        image: locactus/gis-test-api
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5001
---
apiVersion: v1
kind: Service
metadata:
  name: test1-sidecar-svc
  namespace: test1-ns
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 6000
    targetPort: 5000
  selector:
    app: gis-security-sidecar
---
apiVersion: v1
kind: Service
metadata:
  name: test1-api-svc
  namespace: test1-ns
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 6001
    targetPort: 5001
  selector:
    app: gis-test-api
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test1-sidecar-ing
  annotations:
    kubernetes.io/ingress.class: "istio"
  namespace: test1-ns
spec:
  rules:
  - http:
      paths:
      - path: /endpoint/payment-init/make-payment
        backend:
          serviceName: hello2-svc
          servicePort: 6000
---
