### install standard resources:
# $ kubectl apply -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/hello2-app.yaml
# $ kubectl get svc hello2-svc -n hello2-ns -o yaml
# $ minikube ssh -- curl -s http://$(kubectl get svc hello2-svc -n hello2-ns -o jsonpath='{.spec.clusterIP}'):$(kubectl get svc hello2-svc -n hello2-ns -o jsonpath='{.spec.ports[0].port}')/hello
### install sidecar injected resource (istio):
# $ istioctl kube-inject -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/hello2-app.yaml -o service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/hello2-app-istio.yaml
# $ kubectl apply -f service-mesh-workshop/labs/kube/04-deploying-on-service-mesh/hello2-app-istio.yaml
### call to API:
# **** 1) Through ClusterIP SVC (SSH allways is needed):
# $ export SVC_CIP_GW_URI_HELLO2=$(kubectl get svc/hello2-svc -n hello2-ns -o jsonpath='{.spec.clusterIP}'):$(kubectl get svc/hello2-svc -n hello2-ns -o jsonpath='{.spec.ports[0].port}')
# $ minikube ssh -- curl http://${SVC_CIP_GW_URI_HELLO2}/hello
# **** 2) Through Istio Ingress (External load balancers are not supported in Minikube. To use the host IP of the ingress service, along with the NodePort, to access the ingress).
# $ export ING_GW_URI=$(kubectl get po -l istio=ingress -n istio-system -o 'jsonpath={.items[0].status.hostIP}'):$(kubectl get svc istio-ingress -n istio-system -o 'jsonpath={.spec.ports[0].nodePort}')
# $ curl http://${ING_GW_URI}/hello
# $ curl -o /dev/null -s -w "%{http_code}\n" http://${ING_GW_URI}/hello
---
apiVersion: v1
kind: Namespace
metadata:
  name: hello2-ns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hello2-sa
  namespace: hello2-ns
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello2-v1
  namespace: hello2-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: hello2
        version: v1
    spec:
      serviceAccountName: hello2-sa
      containers:
      - name: helloworld
        image: istio/examples-helloworld-v1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello2-v2
  namespace: hello2-ns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: hello2
        version: v2
    spec:
      serviceAccountName: hello2-sa
      containers:
      - name: helloworld
        image: istio/examples-helloworld-v2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: hello2-svc
  labels:
    app: hello2
  namespace: hello2-ns
spec:
  type: ClusterIP
  #type: NodePort
  ports:
  - name: http
    port: 6000
    targetPort: 5000
  selector:
    app: hello2
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: hello2-ing
  annotations:
    kubernetes.io/ingress.class: "istio"
  namespace: hello2-ns
spec:
  rules:
  - http:
      paths:
      - path: /hello
        backend:
          serviceName: hello2-svc
          servicePort: 6000
---
